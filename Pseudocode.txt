Data class:
public class Data
{
	//Account[] accounts = new Account[];
	
	long result = 0;
	
	public void getCurrBalance(Account[] accounts)
	{
		Account expense = new Account();
		expense = accounts[accounts.length()];


		//if (expense.getPurchaseTime() == 0)
		//{
			result = expense.getPV() - accounts.totalBalance();
		/*}
		else
		{
			result = expense.getPV() - accounts.totalBalancePV();
		}*/
		
		// print statements should be in onClick() of button
		System.out.println("Money have: " + accounts.totalBalance());
		System.out.println("Money required: " + result);
		
return result;
	}


	public Data (Account[] accounts)
	{
		this.accounts = accounts;
	}
}


Accounts Class:
public class Accounts
{
	// var for updating total balance: money the user HAS
	long totalBal = 0;


	// calculates balance of accounts array not including expense account


	public long totalBal(Account[] accounts)
	{		
		// loop through the accounts array and add balances
		for (i = 0; i < accounts.length() - 1; i++)
		{
			totalBal += accounts[i].getBalance();
		}
		return totalBal;
	}
	


	//calculates balance of accounts if purchase time != 0


	public long totalBalPV(Account[] accounts)
	{
		//loop through accounts array and calculate present value of each account then
// add to totalBal


for (i = 0; i < accounts.length() - 1; i++)
{
	totalBal += accounts[i].getBalancePV();
}
	}
}


Account Class:
public class Account
{


	public Account()
	{


	}
	// gets simple balance of account
	public long getBalance()
	{
		this.balance = balance;
		return balance;
	}


	public int getPayment()
	{
		this.payment = payment;
		return payment;
	}


	public int getYears()
	{
		this.time = time;
		return time;
	}


	public double getInterest()
	{
		this.interest = interest;
		return interest;
	}


	// calculates present value of the account
	public long getBalancePV(Account account)
	{
		int n = 0;
		int payment = getPayment();
		double return = getInterest();
		long futureValue = getBalance();


		if (account.getYears() > expense.getPurchaseTime())
		{
			n = expense.getPurchaseTime();
		}
		else
		{
			n = account.getYears();
		}


		if (account instanceof asset)
		{
			return calcPV(futureValue, payment, n, interest);
		}
		else if (account instanceof debt)
		{
			return calcPV(futureValue, payment, n, interest);
		}
		else if (account instanceof job)
		{
			return calcPV(futureValue, payment, n, interest);
		}
		else
		{
			return calcPV(futureValue, payment, n, interest);
		}
	}


	public long calcPV(long futureValue, int payment, int n, double interest)
	{
		if (payment == 0)
		{
			return futureValue * ( 1 / ( 1 + (long)interest) ^ (long)n)
}
else
{
	return (long) payment * ( ( ( (1 + (long) interest) ^ (long) n ) - 1) / (long) interest)
} 
	}
}




Expense Class:
public class Expense
{


	public int getPurchaseTime()
	{
		int time = purchaseTime;
		return time;
	}


	public long getPV(Expense expense)
	{
		return getBalancePV(Expense expense);
	}
}
